#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el    

* Variables
** Home directory
#+begin_src emacs-lisp
  (defvar na/home-directory
    (cond ((eq system-type 'windows-nt) (format "c:/Users/%s/" user-login-name))
          (t "~/")))
#+end_src
* Packages
** Initialize packages and package archives
Add all archives and make sure use-package is enabled.
#+begin_src emacs-lisp
  (require 'package)


  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                             ( "jcs-elpa" . "https://jcs-emacs.github.io/jcs-elpa/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Ivy and counsel
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))


  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

  (use-package ivy-rich
  :init
  (ivy-rich-mode 1))

  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)  
#+end_src
** Which-key
Which-key is likely soon going to be added as standard to Emacs.  
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src
** Rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Doom-modeline
All the icon is used for doom-modeline. On first time install run M-x all-the-icons-install and M-x nerd-icons-install-fonts. 
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

;; Setup doom-modeline
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

(display-time)
(setq display-time-24hr-format t)
#+end_src
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** Projectile
#+begin_src emacs-lisp

   (defvar na/project-directory (format "%sProjects/" na/home-directory))
  na/project-directory
  
  (use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (setq projectile-project-search-path (list na/project-directory)))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src
* Basic GUI configuration
** The basics
Remove all unwanted GUI Elements.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  
  (setq visible-bell t)
  (setq ring-bell-function 'ignore) 
#+end_src

** Setup line numbers
Enable line numbers globally but disable for certain modes. 
#+begin_src emacs-lisp
  (set-fringe-mode 10)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
                term-mode-hook
		shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Theme settings
#+begin_src emacs-lisp
(use-package catppuccin-theme)
(load-theme 'catppuccin :no-confirm)
(setq catppuccin-flavor 'mocha)
(catppuccin-reload)
#+end_src

** Font settings
Set default fonts as well as fonts for fixed pitch and variable pitch.
#+begin_src emacs-lisp
(defvar na/default-font-size 120)
(set-face-attribute 'default nil :font "Fira Code Retina" :height na/default-font-size)

(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height na/default-font-size)

(set-face-attribute 'variable-pitch nil :font "Cantarell" :height na/default-font-size :weight 'regular)
#+end_src

* Org-mode
** Setup org-mode
#+begin_src emacs-lisp
  (defun na/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun na/org-font-setup ()
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Code Retina" :weight 'regular :height (cdr face)))

    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
    :hook (org-mode . na/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-files
          '( ""))
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (na/org-font-setup))
#+end_src
** Org-superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))

  (with-eval-after-load 'org-superstar
    (set-face-attribute 'org-superstar-item nil :height 1.0)
    (set-face-attribute 'org-superstar-header-bullet nil :height 1.0)
    (set-face-attribute 'org-superstar-leading nil :height 1.0))

  (setq org-superstar-headline-bullets-list
        '("#" ("❱") "↪" "•"))

  (setq org-superstar-cycle-headline-bullets nil)

  (setq org-superstar-leading-fallback ?\s)
#+end_src
** Org-babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

(setq org-confirm-babel-evaluate nil)

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src
** Visual-fill-column
#+begin_src emacs-lisp
(defun na/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . na/org-mode-visual-fill))
#+end_src
** Jupyter export
Enables export from org-mode to Jupyter. Package need to be manually downloaded from https://github.com/zaeph/ox-ipynb.  
#+begin_src emacs-lisp
  (use-package ox-ipynb
    :load-path "~/.emacs.d/lisp/")
#+end_src
** Auto-tangle config on save
Enable org mode to automatically write source blocks to the correct config file on save.
#+begin_src emacs-lisp
  (defvar na/config-filename
    (format "%sProjects/Emacs-Configuration/emacs.org" na/home-directory))

  (defun na/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name na/config-filename))
           ;; Dynamic scoping to the rescue
           (let ((org-confirm-babel-evaluate nil))
             (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'na/org-babel-tangle-config)))
#+end_src
* Behavior settings
** Spell-checking
#+begin_src emacs-lisp
    (use-package ispell
    :init
    (setenv "DICTIONARY" "en_US")
    (setenv "DICPATH" "C:\\Hunspell")
    :if (eq system-type 'windows-nt)
    :custom ((ispell-program-name "C:\\Hunspell\\hunspell")
             (ispell-local-dictionary "en_US")
             (ispell-local-dictionary-alist
              '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))))

  (when (eq system-type 'windows-nt)
    (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist))

  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src
** Remove whitespaces
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'delete-trailing-whitespace nil t)
#+end_src
** Auto-complete brackets
#+begin_src emacs-lisp
(electric-pair-mode 1)
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

(show-paren-mode 1)
#+end_src
** File encoding on Windows
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (prefer-coding-system 'utf-8-unix)
    (setq coding-system-for-read 'utf-8-unix)
    (setq coding-system-for-write 'utf-8-unix))
#+end_src
** Set custom file
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/emacs-custom.el")
(load custom-file)
#+end_src
